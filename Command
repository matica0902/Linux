##grep
grep -n 'the' regular_express.txt


##AWK
<前言>
1.awk 除了用在基本用法中的輸出模式,還有強大的程式模式,因 awk 本身有自己的 script 直譯語言。至於要不要學
awk 的程式模式?因每個人需求和專才不同,下段的敘述看完自行判斷。
2.許多的應用可用 C 語言或 shell script 或 awk 皆可達到要求,但 C 語言進入門檻較高,且對小程式來說如用牛刀
殺雞太大費周章,而用 shell script 來處理文字常力有未逮。
3.如熟 awk script 語言且才華洋溢,幾乎可完全取代所有過濾程式(如grep/sed/tr/cut 等)外加有計算統計功能,如有
文字記錄的資料要處理,awk 可列為第一考慮。且有人測過同一功能用 awk 來完成其執行的速度是 shell script 的
30 倍以上。
4.awk script 語法大量借用 C 語言語法,如果已熟悉 C/C++/Java 等語言,再來學習 awk 的 script 語言就覺得很簡
單,但反之可能就比較吃力。




(EX1)cat /etc/passwd | awk '{FS=":"} $3 < 10 {print $1 "\t " $3}'  #以":"為分隔 之後查只要每一行的第三欄<10 就印出第1,3 兩欄

(EX2)grep -n 'c' bbcut1001.txt|awk -F" " '{print $3}'  #waring "" 是錯的  要空一格" " 才是以空格為分界

NF	每一行 ($0) 擁有的欄位總數
NR	目前 awk 所處理的是『第幾行』資料
FS	目前的分隔字元，預設是空白鍵

dmtsai@study ~]$ cat pay.txt | \       #連結下一段指令 使用 "\"
> awk '{if(NR==1) printf "%10s %10s %10s %10s %10s\n",$1,$2,$3,$4,"Total"}  #用' ' 架構Script 且用enter 代替 ;
> NR>=2{total = $2 + $3 + $4                                                #NR 代表第幾欄 
> printf "%10s %10d %10d %10d %10.2f\n", $1, $2, $3, $4, total}'            #printf "%10s",$1 格式化印出 $1 
你可以仔細的比對一下上面兩個輸入有啥不同～




##Grep 與 Find 檔案結合
EX:  grep '\*' $(find / -type f 2> /dev/null )
(1)grep '\*'  是將目地檔案中含有*字元找出 \是跳脫字元
(2)$(find / -type f 2> /dev/null ) 是找出所有根目錄下的檔案 
